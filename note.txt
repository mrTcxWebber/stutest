12
database.js链接数据库，或在models文件夹中定义并返回collection集合表
在router下面的路由文件中调用操作

Document文档(非常类似于关系型数据库管理系统中的行)
Collection集合 - 由一组文档组成，相当于一张表

Schema  = “集合”的模型骨架
Entity —— 由Model创建的实体

npm install mongoose
var mongoose = require("mongoose");
var db = mongoose.connect("mongodb://127.0.0.1:27017/test");
var TestSchema = new mongoose.Schema({ // 定义集合的骨架
    name : { type:String },
    age  : { type:Number, default:0 },
    email: { type:String },
    time : { type:Date, default:Date.now }
});
// 用骨架生成可操作表的模型 db.model test1为表名字  表名后默认加s
var Model = db.model("test1", TestSchema );
// 用模型Entity创建数据
var TestEntity = new Model({
    name : "helloworld",
    age  : 28,
    email: "helloworld@qq.com"
});

//
TestEntity.save(function(err,doc){
  if(err){
     console.log("error :" + error);
  }else{
     console.log(doc);
  }
});


// 增 这个是用model创建数据
Model.create({name:'model_t',age:20,email:'a1.com'}, function(err,doc){
  if(err) return;
  console.log(doc)
})
Entity.save(文档数据, callback))

//  查
Model.find({条件},{过滤条件},{limit:2},function(error,docs){
   //若没有向find传递参数，默认的是显示所有文档
   limit, skip是跳过  {sort:{age:-1}}降序
});
 
Model.find({ "age": 28 }, function (error, docs) {
  if(error){
    console.log("error :" + error);
  }else{
    console.log(docs); //docs: age为28的所有文档
	doc.username = req.body.username;  查出来的也属于Entity对象所以有save方法
    doc.email = req.body.email;
    doc.save(function(err){
      res.redirect('/users/list');
    })
  }
}); 


// 改
Model.update({name: 'md'}, {$set : { age : 16 }}, function(error, status){
    if(error) {
        console.log(error);return;
    } else {
        Model.find({}, function(err, doc){})
    }
});

// 删
Model.remove({name: 'model_create'}, function(error, status) {
   这个只要符合条件的都删除了
})

// 其他方法查看文档的api-model
